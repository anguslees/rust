#!/usr/bin/make -f

# TODO: --target is a comma-separated list - build cross-compiler for
# all supported targets.

# Rust builtin triples use "unknown-linux-gnu" system.
# TODO: This will probably come back to haunt me.  Consider making
# "new" triples that match Debian's.
#DEB_BUILD_GNU_TYPE = $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
#DEB_HOST_GNU_TYPE = $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_CPU = $(shell dpkg-architecture -qDEB_BUILD_GNU_CPU)
DEB_HOST_GNU_CPU = $(shell dpkg-architecture -qDEB_HOST_GNU_CPU)
DEB_BUILD_GNU_SYSTEM = $(shell dpkg-architecture -qDEB_BUILD_GNU_SYSTEM)
DEB_HOST_GNU_SYSTEM = $(shell dpkg-architecture -qDEB_HOST_GNU_SYSTEM)
DEB_HOST_GNU_TYPE = $(DEB_HOST_GNU_CPU)-unknown-$(DEB_HOST_GNU_SYSTEM)
DEB_BUILD_GNU_TYPE = $(DEB_BUILD_GNU_CPU)-unknown-$(DEB_BUILD_GNU_SYSTEM)

DEB_HOST_MULTIARCH = $(shell dpkg-architecture -qDEB_HOST_MULTIARCH)

MAKE_CHECK_TARGET = check-notidy
MAKE_BUILD_TARGET = all
MAKE_CLEAN_TARGET = clean-all

#DEB_CONFIGURE_EXTRA_FLAGS += --disable-verify-install

# TODO: Add --jemalloc-root=/usr/lib/$(DEB_BUILD_GNU_TYPE) once/if
# libjemalloc-dev package is modified to use --without-mangling

# Rust src/llvm/ is a modified version of LLVM.
# TODO: Review the difference and decide how important this is.
# Rust requires (unreleased) LLVM 3.6 (at least for llvm.assume intrinsic).
# See https://github.com/rust-lang/llvm for the LLVM version.
#DEB_CONFIGURE_EXTRA_FLAGS += --llvm-root=/usr

ifeq (,$(findstring dlstage0,$(DEB_BUILD_PROFILES)))
# Without these options, a pre-built stage0 will be downloaded from
# rust-lang.org at build time.
	DEB_CONFIGURE_EXTRA_FLAGS += --enable-local-rust --local-rust-root=/usr
endif

BUILD_DOCS = 1
ifneq (,$(findstring nodocs,$(DEB_BUILD_PROFILES)))
  DEB_CONFIGURE_EXTRA_FLAGS += --disable-docs
  BUILD_DOCS = 0
endif

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
  DEB_CONFIGURE_EXTRA_FLAGS += --disable-optimize --disable-optimize-cxx --disable-optimize-llvm
endif

# Debhelper clears MAKEFLAGS, so we have to do this again for any
# target where we call $(MAKE) directly.  Boo.
DEB_PARALLEL_JOBS = $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
DEB_MAKE_PARALLEL = $(if $(DEB_PARALLEL_JOBS),-j$(DEB_PARALLEL_JOBS))

%:
	dh $@ --parallel

override_dh_auto_configure:
# Not your regular autoconf
	./configure \
	  --prefix=/usr \
	  --mandir=/usr/share/man \
	  --infodir=/usr/share/info \
	  --sysconfdir=/etc \
	  --localstatedir=/var \
	  --datadir=/usr/share \
	  --libdir=/usr/lib/$(DEB_HOST_MULTIARCH) \
	  --build=$(DEB_BUILD_GNU_TYPE) \
	  --host=$(DEB_HOST_GNU_TYPE) \
	  $(DEB_CONFIGURE_EXTRA_FLAGS)

override_dh_auto_build-arch:
	dh_auto_build -- $(MAKE_BUILD_TARGET)

override_dh_auto_build-indep:
	$(if $(BUILD_DOCS),dh_auto_build -- docs)

override_dh_auto_test:
	# NB: not parallel - there is some race that leads to failures like:
	# note: cc: error: x86_64-unknown-linux-gnu/test/run-pass/generic-default-type-params-cross-crate.stage2-x86_64-unknown-linux-gnulibaux/default_type_params_xc.o: No such file or directory
	$(MAKE) $(MAKE_CHECK_TARGET)

override_dh_auto_clean:
	-$(MAKE) $(DEB_MAKE_PARALLEL) $(MAKE_CLEAN_TARGET)
	-$(RM) Makefile

override_dh_installchangelogs:
	dh_installchangelogs RELEASES.md

override_dh_installdocs:
	dh_installdocs -X.tex -X.aux -X.log -X.out -X.toc

.NOTPARALLEL:
